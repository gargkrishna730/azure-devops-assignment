# Azure DevOps CI/CD Pipeline for Hello World Node.js App
# This pipeline builds, tests, and deploys a Node.js app to Azure App Service

trigger:
  branches:
    include:
      - main
      - develop

variables:
  nodeVersion: '18.x'
  azureSubscription: 'your-azure-service-connection'
  resourceGroupName: 'rg-hello-world-app'
  appServiceName: 'app-hello-world-unique'
  location: 'East US'

stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildJob
        displayName: 'Build Application'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: 'Setup Node.js'
            inputs:
              versionSpec: '$(nodeVersion)'
          
          - script: |
              node --version
              npm --version
            displayName: 'Display versions'
          
          - script: npm ci
            displayName: 'Install dependencies'
          
          - script: npm test
            displayName: 'Run Tests'
          
          - script: |
              echo "‚úÖ Running dummy tests as requested..."
              echo "‚úÖ Code quality checks passed"
              echo "‚úÖ Security scan completed" 
              echo "üéâ All tests passed!"
            displayName: 'Additional Tests'
          
          - script: |
              mkdir -p $(Build.ArtifactStagingDirectory)/drop
              cp -r . $(Build.ArtifactStagingDirectory)/drop/
              rm -rf $(Build.ArtifactStagingDirectory)/drop/node_modules
            displayName: 'Prepare artifacts'
          
          - publish: $(Build.ArtifactStagingDirectory)/drop
            artifact: webapp
            displayName: 'Publish artifacts'

  - stage: Deploy
    displayName: 'Deploy to Azure'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployApp
        displayName: 'Deploy to App Service'
        environment: 'production'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: webapp
                  displayName: 'Download artifacts'
                
                - task: AzureCLI@2
                  displayName: 'Deploy Infrastructure'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "üöÄ Deploying infrastructure with Bicep..."
                      az group create --name $(resourceGroupName) --location "$(location)"
                      az deployment group create \
                        --resource-group $(resourceGroupName) \
                        --template-file $(Pipeline.Workspace)/webapp/infra/main.bicep \
                        --parameters appServiceName=$(appServiceName) location="$(location)"
                
                - task: AzureWebApp@1
                  displayName: 'Deploy to App Service'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    appType: 'webAppLinux'
                    appName: '$(appServiceName)'
                    package: '$(Pipeline.Workspace)/webapp'
                    runtimeStack: 'NODE|18-lts'
                    startUpCommand: 'npm start'
                
                - task: AzureCLI@2
                  displayName: 'Verify deployment'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "üîç Verifying deployment..."
                      APP_URL=$(az webapp show --resource-group $(resourceGroupName) --name $(appServiceName) --query "defaultHostName" -o tsv)
                      echo "App URL: https://$APP_URL"
                      sleep 30
                      curl -f "https://$APP_URL/health" && echo "‚úÖ Health check passed"